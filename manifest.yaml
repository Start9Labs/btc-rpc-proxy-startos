id: btc-rpc-proxy
title: Bitcoin Proxy
version: 0.3.2.7
release-notes: |
  * Add build for x86
  * Bump bitcoind version requirement to accommodate bitcoind v24 and v25
license: mit
wrapper-repo: "https://github.com/Start9Labs/btc-rpc-proxy-wrapper"
upstream-repo: "https://github.com/Kixunil/btc-rpc-proxy"
support-site: "https://github.com/Kixunil/btc-rpc-proxy/issues"
build: ["make"]
description:
  short: Super charge your Bitcoin node
  long: |
    Bitcoin Proxy enables you to specify several users and, for each user, the list of RPC calls they are allowed to make against your Bitcoin node. It also acts as a super charger for your pruned node. If a user or application requires a block not retained by your node, Bitcoin Proxy will dynamically fetch the block over the P2P network, then verify its hash to ensure validity. Your pruned node will now act like a full archival node!
assets:
  license: LICENSE
  icon: icon.png
  instructions: instructions.md
main:
  type: docker
  image: main
  entrypoint: "docker_entrypoint.sh"
  args: []
  mounts:
    main: /root
health-checks:
  rpc:
    name: RPC
    success-message: RPC server is alive and listening for commands
    type: docker
    image: main
    entrypoint: check-rpc.sh
    args: []
    io-format: json
    inject: true
config:
  get:
    type: script
  set:
    type: script
properties:
  type: script
dependencies:
  bitcoind:
    version: ">=0.21.1.2 <26.0.0"
    requirement:
      type: "opt-out"
      how: Can alternatively configure an external bitcoin node.
    description: Bitcoin Proxy sends RPC requests to a bitcoin node, like the Bitcoin Core service.
    config:
      check:
        type: script
      auto-configure:
        type: script
volumes:
  main:
    type: data
alerts:
  install: |
    After installing, you will need to manually enable the new RPC requests if you intend to use them. We strongly recommend enabling ALL requests for your primary user.
interfaces:
  main:
    name: Network interface
    description: Specifies the interface to listen on for HTTP connections.
    tor-config:
      port-mapping:
        8332: "8332"
    lan-config:
      443:
        ssl: true
        internal: 8332
    ui: false
    protocols:
      - tcp
      - http
backup:
  create:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - create
      - /mnt/backup
      - /root/data
    mounts:
      BACKUP: /mnt/backup
      main: /root/data
    io-format: yaml
  restore:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - restore
      - /mnt/backup
      - /root/data
    mounts:
      BACKUP: /mnt/backup
      main: /root/data
    io-format: yaml
migrations:
  from:
    "*":
      type: script
      args: ["from"]
  to:
    "*":
      type: script
      args: ["to"]
